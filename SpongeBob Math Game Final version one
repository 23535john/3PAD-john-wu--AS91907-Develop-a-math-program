Main FileÔºö
import time
import tkinter as tk
from Game_core import StartPage, PlayerInfoPage, LevelMapPage, GamePage, LeaderboardPage
from utils import SoundManager

class BeatMathApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title('SpongeBob Math Adventure')
        self.geometry('1000x800')  # Â¢ûÂä†Á™óÂè£Â∞∫ÂØ∏
        self.minsize(800, 700)    # ËÆæÁΩÆÊúÄÂ∞èÂ∞∫ÂØ∏
        self.configure(bg='#88cfff')
        self.resizable(True, True)  # ÂÖÅËÆ∏Ë∞ÉÊï¥Â§ßÂ∞è
        
        # Set window icon
        try:
            self.iconbitmap('assets/Images/spongebob.ico')
        except:
            pass
        
        # Game state management
        self.player_name = ''
        self.difficulty = 'Easy'  # ÂàùÂßãÂÄºÔºå‰ΩÜ‰ºöÂú®Áé©ÂÆ∂ÈÄâÊã©ÂÖ≥Âç°Êó∂Ë¢´Ë¶ÜÁõñ
        self.selected_character = tk.StringVar(value='SpongeBob')
        self.page_history = []
        self.last_score = None  # Â≠òÂÇ®ÊúÄËøë‰∏ÄÊ¨°ÁöÑÊ∏∏ÊàèÂàÜÊï∞

        # Sound management
        self.sm = SoundManager()

        # Create container
        container = tk.Frame(self)
        container.pack(fill='both', expand=True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)
        self.container = container

        # Frame management
        self.frames = {}
        pages = (StartPage, PlayerInfoPage, LevelMapPage, GamePage, LeaderboardPage)
        for page_class in pages:
            frame = page_class(parent=container, controller=self)
            self.frames[page_class.__name__] = frame
            frame.grid(row=0, column=0, sticky='nsew')

        self.current_page = 'StartPage'
        self.show_frame('StartPage')

    def show_frame(self, name):
        """Display specified frame and manage history"""
        if self.current_page and self.current_page != name and self.current_page != 'StartPage':
            self.page_history.append(self.current_page)
        
        frame = self.frames[name]
        
        # Pre-display processing
        if name == 'GamePage':
            if not frame.reset_game():
                return
        elif name == 'LeaderboardPage':
            frame.refresh()
        
        # Execute frame switch
        self.current_page = name
        frame.tkraise()
    
    def go_back(self):
        """Return to previous page"""
        if self.page_history:
            prev = self.page_history.pop()
            self.show_frame(prev)
        else:
            self.show_frame('StartPage')
    
    def on_close(self):
        """Handle window close event"""
        self.sm.stop_bg_music()
        self.destroy()
    
    def destroy(self):
        """Override destroy method for resource cleanup"""
        self.sm.cleanup()
        super().destroy()

if __name__ == '__main__':
    app = BeatMathApp()
    app.mainloop()

Game_core File

import tkinter as tk
from tkinter import messagebox
from utils import ProblemBank, DataManager

import random

import math

# Game configuration
QUESTIONS_PER_GAME = 12
TIME_PER_QUESTION = 20
JELLYFISH_SPEEDS = {'Easy': 1, 'Medium': 1.5, 'Hard': 2}
LEVEL_NAMES = {
    'Easy': "Jellyfish Fields",
    'Medium': "Krusty Krab",
    'Hard': "Squidward's House"
}
LEVEL_POINTS = {'Easy': 10, 'Medium': 100, 'Hard': 1000}
BACKGROUND_COLORS = {
    'Easy': '#88cfff',   # Light blue - Jellyfish Fields
    'Medium': '#ff9966', # Light orange - Krusty Krab
    'Hard': '#9b59b6'    # Light purple - Squidward's House
}

STATUS_BAR_COLOR = '#3A6EA5'  # Dark blue status bar
TEXT_COLOR = '#2C3E50'        # Dark blue text

class StartPage(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent, bg='#88cfff')
        self.controller = controller
        self._create_widgets()
    
    def _create_widgets(self):
        """Create UI elements"""
        # Background image
        try:
            bg_image = tk.PhotoImage(file='assets/Images/bg_menu.png')
            bg_label = tk.Label(self, image=bg_image)
            bg_label.image = bg_image
            bg_label.place(x=0, y=0, relwidth=1, relheight=1)
        except Exception:
            # Fallback if image not found
            self.config(bg='#88cfff')
        
        # Title
        title_frame = tk.Frame(self, bg='#88cfff')
        title_frame.place(relx=0.5, rely=0.2, anchor='center')
        
        tk.Label(
            title_frame, 
            text='SpongeBob', 
            font=('Comic Sans MS', 36, 'bold'),
            fg='#FFD700', 
            bg='#88cfff'
        ).pack()
        
        tk.Label(
            title_frame, 
            text='Math Adventure', 
            font=('Comic Sans MS', 32, 'bold'),
            fg='#FF6B6B', 
            bg='#88cfff'
        ).pack()
        
        # Button style
        btn_style = {
            'font': ('Comic Sans MS', 18),
            'bg': '#FFD700', 
            'fg': 'black',
            'activebackground': '#FFA500',
            'relief': 'raised', 
            'bd': 3,
            'width': 15,
            'pady': 8
        }
        
        # Button container
        btn_frame = tk.Frame(self, bg='#88cfff')
        btn_frame.place(relx=0.5, rely=0.5, anchor='center')
        
        # Buttons
        tk.Button(
            btn_frame, 
            text='Start Game', 
            **btn_style,
            command=lambda: self.controller.show_frame('PlayerInfoPage')
        ).pack(pady=10)
        
        tk.Button(
            btn_frame, 
            text='Leaderboard', 
            **btn_style,
            command=lambda: self.controller.show_frame('LeaderboardPage')
        ).pack(pady=10)
        
        tk.Button(
            btn_frame, 
            text='Exit Game', 
            **btn_style,
            command=self.controller.destroy
        ).pack(pady=10)
        
        # Music toggle button
        self.music_btn = tk.Button(
            self, 
            text='üéµ', 
            font=('Arial', 14), 
            bg='#FFD700', 
            bd=0,
            command=self.toggle_music
        )
        self.music_btn.place(x=740, y=10)
        
        # SpongeBob character
        tk.Label(
            self, 
            text='üßΩ', 
            font=('Arial', 48), 
            bg='#88cfff'
        ).place(relx=0.5, rely=0.8, anchor='center')

    def toggle_music(self):
        """Toggle music and update button"""
        music_on = self.controller.sm.toggle_music()
        self.music_btn.config(text='üéµ' if music_on else 'üîá')

class PlayerInfoPage(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent, bg='#FFE4B5')
        self.controller = controller
        self._create_widgets()
    
    def _create_widgets(self):
        """Create UI elements"""
        # Background
        try:
            bg_image = tk.PhotoImage(file='assets/Images/krusty_krab.png')
            bg_label = tk.Label(self, image=bg_image)
            bg_label.image = bg_image
            bg_label.place(x=0, y=0, relwidth=1, relheight=1)
        except Exception:
            # Fallback if image not found
            self.config(bg='#FFE4B5')
        
        # Form frame
        form_frame = tk.Frame(self, bg='#FFE4B5', bd=5, relief='groove')
        form_frame.place(relx=0.5, rely=0.5, anchor='center', width=400, height=300)
        
        # Title
        tk.Label(
            form_frame, 
            text='üë§ Krusty Krab Registration',
            font=('Comic Sans MS', 18, 'bold'),
            bg='#FFE4B5', 
            fg='#8B4513',
            pady=10
        ).pack()
        
        # Name entry
        tk.Label(
            form_frame, 
            text='Your Name:', 
            bg='#FFE4B5',
            font=('Comic Sans MS', 12)
        ).pack(pady=5)
        
        self.name_var = tk.StringVar()
        name_entry = tk.Entry(
            form_frame, 
            textvariable=self.name_var, 
            font=('Comic Sans MS', 12), 
            width=20
        )
        name_entry.pack(pady=5)
        name_entry.focus_set()
        
        # Character selection
        tk.Label(
            form_frame, 
            text='Choose Character:', 
            bg='#FFE4B5',
            font=('Comic Sans MS', 12)
        ).pack(pady=5)
        
        char_menu = tk.OptionMenu(
            form_frame, 
            self.controller.selected_character,
            'SpongeBob', 'Patrick', 'Squidward', 'Sandy', 'Mr. Krabs'
        )
        char_menu.config(font=('Comic Sans MS', 12), width=12)
        char_menu.pack(pady=5)
        
        # Start button
        start_btn = tk.Button(
            form_frame, 
            text='Start Adventure!', 
            font=('Comic Sans MS', 14),
            bg='#FFD700', 
            fg='black', 
            bd=3, 
            padx=10, 
            pady=5,
            command=self.on_next
        )
        start_btn.pack(pady=15)
        
        # Menu button (ËøîÂõû‰∏ªËèúÂçï)
        menu_btn = tk.Button(
            self, 
            text='üè† Main Menu', 
            font=('Comic Sans MS', 12),
            bg='#5a9', 
            fg='white',
            padx=10,
            pady=5,
            command=lambda: self.controller.show_frame('StartPage')
        )
        menu_btn.place(relx=0.5, rely=0.95, anchor='center')

    def on_next(self):
        """Validate and proceed to level map"""
        name = self.name_var.get().strip()
        if not name or name.isdigit():
            messagebox.showwarning('Missing Info', 'Please enter a valid name!')
            return
        self.controller.player_name = name
        self.controller.show_frame('LevelMapPage')

class LevelMapPage(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent, bg='#aaffff')
        self.controller = controller
        self._create_widgets()
    
    def _create_widgets(self):
        """Create UI elements"""
        # Background
        try:
            bg_image = tk.PhotoImage(file='assets/Images/bikini_bottom.png')
            bg_label = tk.Label(self, image=bg_image)
            bg_label.image = bg_image
            bg_label.place(x=0, y=0, relwidth=1, relheight=1)
        except Exception:
            # Fallback if image not found
            self.config(bg='#aaffff')
        
        # Title
        title_frame = tk.Frame(self, bg='#aaffff')
        title_frame.place(relx=0.5, rely=0.1, anchor='center')
        
        tk.Label(
            title_frame, 
            text='üó∫Ô∏è Bikini Bottom Adventure Map',
            font=('Comic Sans MS', 24, 'bold'),
            bg='#aaffff', 
            fg='#006994'
        ).pack(pady=10)
        
        # Level selection
        map_frame = tk.Frame(self, bg='#aaffff')
        map_frame.place(relx=0.5, rely=0.5, anchor='center')
        
        # Level descriptions and colors
        level_info = [
            ("Jellyfish Fields\nBasic Arithmetic", '#7ec850', 'Easy'),
            ("Krusty Krab\nIntermediate Problems", '#ff9966', 'Medium'),
            ("Squidward's House\nAdvanced Challenges", '#9b59b6', 'Hard')
        ]
        
        for i, (desc, color, level) in enumerate(level_info):
            level_btn = tk.Button(
                map_frame, 
                text=desc,
                font=('Comic Sans MS', 14),
                bg=color, 
                fg='white', 
                width=20, 
                height=3,
                relief='raised',
                bd=3,
                command=lambda l=level: self.start_level(l)
            )
            level_btn.grid(row=0, column=i, padx=15, pady=10)
        
        # Character display
        char_label = tk.Label(
            self, 
            text='üßΩ', 
            font=('Arial', 48), 
            bg='#aaffff'
        )
        char_label.place(relx=0.5, rely=0.8, anchor='center')
        
        # Menu button (ËøîÂõû‰∏ªËèúÂçï)
        menu_btn = tk.Button(
            self, 
            text='üè† Main Menu', 
            font=('Comic Sans MS', 12),
            bg='#5a9', 
            fg='white',
            padx=10,
            pady=5,
            command=lambda: self.controller.show_frame('StartPage')
        )
        menu_btn.place(relx=0.5, rely=0.95, anchor='center')

    def start_level(self, level):
        """Start selected game level"""
        self.controller.difficulty = level
        self.controller.show_frame('GamePage')


class GamePage(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent, bg='white')
        self.controller = controller
        self.dm = DataManager()
        
        # ÂÆöÊó∂Âô®ÁÆ°ÁêÜ
        self._active_timers = []
        self._active_animations = []
        self._game_active = False
        
        self._create_widgets()
        self.reset_game()

    def _create_widgets(self):
        self.config(bg='white')
        main_frame = tk.Frame(self, bg='white')
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
    
    
        status_bar = tk.Frame(main_frame, bg=STATUS_BAR_COLOR, height=50)
        status_bar.pack(fill='x', pady=(0, 10))
    
    
        self.lives_frame = tk.Frame(status_bar, bg=STATUS_BAR_COLOR)
        self.lives_frame.pack(side='left', padx=15)
    
        try:
            self.heart_img = tk.PhotoImage(file='assets/Images/heart.png')
            self.heart_img = self.heart_img.subsample(4, 4)
        except Exception:
            self.heart_img = None
    
        self.lives_labels = []
        for i in range(3):
            if self.heart_img:
                label = tk.Label(self.lives_frame, image=self.heart_img, bg=STATUS_BAR_COLOR)
            else:
                label = tk.Label(self.lives_frame, text='‚ô•', 
                            font=('Comic Sans MS', 20), 
                            fg='#FF6B6B', bg=STATUS_BAR_COLOR)
            label.pack(side='left', padx=2)
            self.lives_labels.append(label)
    
    # ÂàÜÊï∞ÊòæÁ§∫
        self.score_label = tk.Label(
            status_bar, 
            text='Score: 0', 
            font=('Comic Sans MS', 16), 
            fg='#FFF44F',
            bg=STATUS_BAR_COLOR
        )
        self.score_label.pack(side='left', padx=15)
    
    # ËÆ°Êó∂Âô®ÊòæÁ§∫
        self.timer_label = tk.Label(
            status_bar, 
            text='Time: 20s', 
            font=('Comic Sans MS', 16), 
            fg='white', 
            bg=STATUS_BAR_COLOR
        )
        self.timer_label.pack(side='right', padx=15)
    
    # ÈóÆÈ¢òËÆ°Êï∞Âô®
        self.counter_label = tk.Label(
            status_bar, 
            text='Question: 1/12', 
            font=('Comic Sans MS', 16), 
            fg='white', 
            bg=STATUS_BAR_COLOR
        )
        self.counter_label.pack(side='right', padx=15)
    
    # ÈóÆÈ¢òÊòæÁ§∫
        self.question_label = tk.Label(
            main_frame, 
            text='', 
            font=('Comic Sans MS', 18, 'bold'), 
            bg='white', 
            fg=TEXT_COLOR,
            wraplength=700,
            pady=20
        )
        self.question_label.pack(fill='x', padx=20, pady=10)
    
    # Ê∞¥ÊØçÁîªÂ∏ÉÂÆπÂô® - Á°Æ‰øùÊúâË∂≥Â§üÁ©∫Èó¥
        canvas_container = tk.Frame(main_frame, bg='white')
        canvas_container.pack(fill='both', expand=True, pady=10)
    
        self.canvas = tk.Canvas(canvas_container, bg='#87CEEB', highlightthickness=0)
        self.canvas.pack(fill='both', expand=True)
    
    # ÂèçÈ¶àÊ†áÁ≠æ
        self.feedback_label = tk.Label(
            main_frame, 
            text='', 
            font=('Comic Sans MS', 16, 'bold'), 
            bg='white',
            fg=TEXT_COLOR,
            height=2
        )
        self.feedback_label.pack(fill='x', pady=10)
    
    # ÊåâÈíÆÂÆπÂô® - Áã¨Á´ãÊ°ÜÊû∂Á°Æ‰øù‰∏çË¢´ÂéãÁº©
        btn_container = tk.Frame(main_frame, bg='white', height=60)
        btn_container.pack(side='bottom', fill='x', pady=(0, 10))
        btn_container.pack_propagate(False)  # Èò≤Ê≠¢ÂÜÖÈÉ®ÈÉ®‰ª∂ÊîπÂèòÂÆπÂô®Â§ßÂ∞è
    
    # ËøîÂõûÂú∞ÂõæÊåâÈíÆ - ‰ΩøÁî®Âõ∫ÂÆöÂ∞∫ÂØ∏
        back_btn = tk.Button(
            btn_container, 
            text='‚¨Ö Back to Map', 
            font=('Comic Sans MS', 14),
            bg='#3A6EA5',
            fg='white',
            padx=20,
            pady=10,
            width=20,  # Âõ∫ÂÆöÂÆΩÂ∫¶
            command=self.return_to_map
        )
        back_btn.pack(side='right', padx=20, pady=5)
    def cancel_all_timers(self):
        """ÂèñÊ∂àÊâÄÊúâÂÆöÊó∂‰ªªÂä°"""
        for timer_id in self._active_timers:
            self.after_cancel(timer_id)
        self._active_timers = []
        
        for anim_id in self._active_animations:
            self.after_cancel(anim_id)
        self._active_animations = []

    def return_to_map(self):
        if messagebox.askyesno("Confirm", "Exit current level? Progress will be lost."):
            self.cancel_all_timers()
            self._game_active = False
            self.controller.show_frame('LevelMapPage')

    def reset_game(self):
   
        self.cancel_all_timers()
        self._game_active = True
        self.question_count = 0
        self.score = 0
        self.lives = 3
        self.pb = ProblemBank(self.controller.difficulty)
        self.jellyfish = []
        
        # ËÆæÁΩÆËÉåÊôØÈ¢úËâ≤
        self.bg_color = BACKGROUND_COLORS.get(self.controller.difficulty, 'white')
        self.config(bg=self.bg_color)
        self.question_label.config(bg=self.bg_color)
        self.feedback_label.config(bg=self.bg_color)
        
        # Êõ¥Êñ∞ÁîüÂëΩÂÄºÊòæÁ§∫
        for i, label in enumerate(self.lives_labels):
            label.config(state='normal' if i < self.lives else 'disabled')
    
        # ÂºÄÂßãÊ∏∏Êàè
        self.next_question()
        return True

    def update_status(self):
        """Êõ¥Êñ∞Áä∂ÊÄÅÊòæÁ§∫"""
        self.score_label.config(text=f'Score: {self.score}')
        
        # Êõ¥Êñ∞ÁîüÂëΩÂÄºÊòæÁ§∫
        for i, label in enumerate(self.lives_labels):
            label.config(state='normal' if i < self.lives else 'disabled')
        
        self.counter_label.config(text=f'Question: {self.question_count}/{QUESTIONS_PER_GAME}')

    def next_question(self):
        """Âä†ËΩΩ‰∏ã‰∏ÄÈ¢ò"""
        if not self._game_active:
            return
            
        if self.question_count >= QUESTIONS_PER_GAME:
            self.game_completed()
            return
            
        self.question_count += 1
        
        # ÁîüÊàêÊñ∞ÈóÆÈ¢ò
        problem, answer, options = self.pb.generate()
        self.correct_answer = answer
        self.options = options
        
        # Êõ¥Êñ∞UI
        level_name = LEVEL_NAMES.get(self.controller.difficulty, self.controller.difficulty)
        self.question_label.config(text=f"{level_name}\n\n{problem}")
        self.feedback_label.config(text='')
        self.update_status()
        
        # ÂàõÂª∫Ê∞¥ÊØç
        self.create_jellyfish(options)
        
        # ÂºÄÂßãËÆ°Êó∂Âô®
        self.time_left = TIME_PER_QUESTION
        self.timer_label.config(text=f'Time: {self.time_left}s')
        self.start_timer()

    def start_timer(self):
        """ÂêØÂä®ËÆ°Êó∂Âô®"""
        if not self._game_active:
            return
            
        self.update_timer()

    def update_timer(self):
        """Êõ¥Êñ∞ËÆ°Êó∂Âô®"""
        if not self._game_active or not self.winfo_ismapped():
            return
        
        if self.time_left <= 0:
            self.handle_timeout()
            return
        
        self.time_left -= 1
        self.timer_label.config(text=f'Time: {self.time_left}s')
        
        # Âè™‰øùÁïô‰∏Ä‰∏™Ê¥ªÂä®ÁöÑËÆ°Êó∂Âô®
        if self._active_timers:
            self.after_cancel(self._active_timers[0])
        
        timer_id = self.after(1000, self.update_timer)
        self._active_timers = [timer_id]

    def handle_timeout(self):
        """Â§ÑÁêÜË∂ÖÊó∂"""
        if not self._game_active:
            return
            
        self.controller.sm.play_wrong()
        self.lives -= 1
        self.feedback_label.config(text='Time up!', fg='red')
        self.update_status()
        
        # Á¶ÅÁî®ÊâÄÊúâÊ∞¥ÊØçÁÇπÂáª
        self.disable_jellyfish()
        
        if self.lives <= 0:
            self.after(1500, self.game_over)
        else:
            self.after(1500, self.next_question)

    def create_jellyfish(self, options):
        """ÂàõÂª∫Ê∞¥ÊØç"""
        self.canvas.delete('all')
        self.jellyfish = []
        positions = self.calculate_positions(len(options))
        
        for i, option in enumerate(options):
            x, y = positions[i]
            
            # ÂàõÂª∫Ê∞¥ÊØç
            jelly_id = self.canvas.create_oval(
                x-40, y-40, x+40, y+40,
                fill='#FFB6C1', outline='#FF69B4', width=2,
                tags=('jellyfish', f'jelly_{i}')
            )
            
            # Ê∑ªÂä†ÊñáÊú¨
            text_id = self.canvas.create_text(
                x, y, 
                text=option, 
                font=('Comic Sans MS', 14),
                tags=('jellyfish', f'jelly_{i}')
            )
            
            # ÁªëÂÆöÁÇπÂáª‰∫ã‰ª∂
            self.canvas.tag_bind(f'jelly_{i}', '<Button-1>', 
                                lambda e, opt=option: self.check_answer(opt))
            
            # ËÆæÁΩÆÁßªÂä®Â±ûÊÄß
            angle = random.uniform(0, 2 * math.pi)
            speed = JELLYFISH_SPEEDS.get(self.controller.difficulty, 1.0)
            dx = math.cos(angle) * speed
            dy = math.sin(angle) * speed
            
            self.jellyfish.append({
                'id': jelly_id,
                'text': text_id,
                'dx': dx,
                'dy': dy,
                'x': x,
                'y': y
            })
        
        # ÂºÄÂßãÂä®Áîª
        self.animate_jellyfish()

    def disable_jellyfish(self):
        """Á¶ÅÁî®ÊâÄÊúâÊ∞¥ÊØçÁÇπÂáª"""
        for i in range(len(self.jellyfish)):
            self.canvas.tag_unbind(f'jelly_{i}', '<Button-1>')

    def calculate_positions(self, count):
    
        width = max(self.canvas.winfo_width(), 700)
        height = min(max(self.canvas.winfo_height(), 400), 400) * 0.7  # ‰ΩøÁî®70%È´òÂ∫¶
    
        if count == 1:
            return [(width // 2, height // 2)]

        positions = []
        center_x, center_y = width // 2, height // 2
        radius = min(width, height) * 0.3
    
    # Á°Æ‰øùÊ∞¥ÊØçÂú®Ê¥ªÂä®Âå∫ÂüüÂÜÖ
        for i in range(count):
            angle = 2 * math.pi * i / count
            x = center_x + radius * math.cos(angle)
            y = center_y + radius * math.sin(angle)
        
            # Á°Æ‰øù‰ΩçÁΩÆÂú®ËæπÁïåÂÜÖ
            x = max(40, min(width - 40, x))
            y = max(40, min(height - 40, y))
        
            positions.append((x, y))
    
        return positions

    def animate_jellyfish(self):
        
        if not self._game_active or not self.winfo_ismapped():
            return
        
    # Ëé∑ÂèñÁîªÂ∏ÉÂ∞∫ÂØ∏
        width = self.canvas.winfo_width()
        height = self.canvas.winfo_height()
    
    # ËÆæÁΩÆÂêàÁêÜÁöÑÈªòËÆ§ÂÄº
        if width < 100 or height < 100:
            width = 700
            height = 400
    
    # ÈôêÂà∂Ê¥ªÂä®Âå∫ÂüüÈ´òÂ∫¶ÔºàÂè™‰ΩøÁî®ÁîªÂ∏ÉÈ´òÂ∫¶ÁöÑ70%Ôºâ
        boundary_height = int(height * 0.7)
    
        for jelly in self.jellyfish:
        # Êõ¥Êñ∞‰ΩçÁΩÆ
            jelly['x'] += jelly['dx']
            jelly['y'] += jelly['dy']
        
        # ËæπÁïåÁ¢∞Êíû - Â∑¶Âè≥ËæπÁïå
            if jelly['x'] < 40:
                jelly['x'] = 40
                jelly['dx'] = abs(jelly['dx'])  # Á°Æ‰øùÂêëÂè≥ÁßªÂä®
            elif jelly['x'] > width - 40:
                jelly['x'] = width - 40
                jelly['dx'] = -abs(jelly['dx'])  # Á°Æ‰øùÂêëÂ∑¶ÁßªÂä®
            
        # ‰∏ä‰∏ãËæπÁïå - ÈôêÂà∂Âú®ÂèØËßÅÂå∫ÂüüÂÜÖ
            if jelly['y'] < 40:
                jelly['y'] = 40
                jelly['dy'] = abs(jelly['dy'])  # Á°Æ‰øùÂêë‰∏ãÁßªÂä®
            elif jelly['y'] > boundary_height:
                jelly['y'] = boundary_height
                jelly['dy'] = -abs(jelly['dy'])  # Á°Æ‰øùÂêë‰∏äÁßªÂä®
        
        # ÁßªÂä®Ê∞¥ÊØç
            self.canvas.coords(jelly['id'], 
                          jelly['x']-40, jelly['y']-40, 
                          jelly['x']+40, jelly['y']+40)
            self.canvas.coords(jelly['text'], jelly['x'], jelly['y'])
    
    # ÁªßÁª≠Âä®Áîª
        anim_id = self.after(50, self.animate_jellyfish)
        self._active_animations = [anim_id]
    def check_answer(self, selected):
        """Ê£ÄÊü•Á≠îÊ°à"""
        # Á¶ÅÁî®Ê∞¥ÊØçÁÇπÂáªÈò≤Ê≠¢Â§öÊ¨°Ëß¶Âèë
        self.disable_jellyfish()
        
        # ÂØπ‰∫é‰∫åÊ¨°ÊñπÁ®ãÔºåÊØîËæÉÂÖÉÁªÑ
        if isinstance(self.correct_answer, tuple):
            try:
                parts = selected.split(',')
                if len(parts) != 2:
                    correct = False
                else:
                    selected_tuple = (float(parts[0]), float(parts[1]))
                    correct = (selected_tuple == self.correct_answer or
                              (selected_tuple[1], selected_tuple[0]) == self.correct_answer)
            except:
                correct = False
        else:
            try:
                correct = abs(float(selected) - float(self.correct_answer)) < 0.01
            except:
                correct = False
        
        if correct:
            self.handle_correct()
        else:
            self.handle_incorrect()

    def handle_correct(self):
        """Â§ÑÁêÜÊ≠£Á°ÆÁ≠îÊ°à"""
        self.controller.sm.play_correct()
        points = LEVEL_POINTS.get(self.controller.difficulty, 10)
        self.score += points
        self.feedback_label.config(text=f'+{points} points! Correct!', fg='green')
        self.update_status()
        
        self.after(1500, self.next_question)

    def handle_incorrect(self):
        """Â§ÑÁêÜÈîôËØØÁ≠îÊ°à"""
        self.controller.sm.play_wrong()
        self.lives -= 1
        self.feedback_label.config(text='Incorrect! Try again.', fg='red')
        self.update_status()
        
        if self.lives <= 0:
            self.after(1500, self.game_over)
        else:
            self.after(1500, self.next_question)

    def save_and_show_leaderboard(self):
        """‰øùÂ≠òÂàÜÊï∞Âπ∂ÊòæÁ§∫ÊéíË°åÊ¶ú"""
        self.dm.save_score(
            self.controller.player_name,
            self.score,
            self.controller.difficulty
        )
        
        self.controller.last_score = {
            'name': self.controller.player_name,
            'score': self.score,
            'difficulty': self.controller.difficulty
        }
        
        self.controller.show_frame('LeaderboardPage')

    def game_completed(self):
        """Ê∏∏ÊàèÂÆåÊàê"""
        self._game_active = False
        self.cancel_all_timers()
        
        messagebox.showinfo(
            "Level Complete!",
            f"Congratulations {self.controller.player_name}!\n"
            f"You completed the {self.controller.difficulty} difficulty!\n\n"
            f"Score: {self.score}"
        )
        
        self.save_and_show_leaderboard()

    def game_over(self):
        """Ê∏∏ÊàèÁªìÊùü"""
        self._game_active = False
        self.cancel_all_timers()
        
        messagebox.showinfo(
            "Game Over",
            f"Out of lives, {self.controller.player_name}!\n"
            f"Final Score: {self.score}"
        )
        
        self.save_and_show_leaderboard()


class LeaderboardPage(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent, bg='#f0f8ff')
        self.controller = controller
        self._create_widgets()
    
    def _create_widgets(self):
        """Create UI elements"""
        # Background
        try:
            bg_image = tk.PhotoImage(file='assets/Images/hall_of_fame.png')
            bg_label = tk.Label(self, image=bg_image)
            bg_label.image = bg_image
            bg_label.place(x=0, y=0, relwidth=1, relheight=1)
        except Exception:
            # Fallback if image not found
            self.config(bg='#f0f8ff')
        
        # Title
        title_frame = tk.Frame(self, bg='#f0f8ff')
        title_frame.place(relx=0.5, rely=0.1, anchor='center')
        
        tk.Label(
            title_frame, 
            text='üèÜ Bikini Bottom Hall of Fame',
            font=('Comic Sans MS', 24, 'bold'),
            bg='#f0f8ff', 
            fg='#006994'
        ).pack(pady=10)
        
        # Leaderboard frame
        self.leaderboard_frame = tk.Frame(self, bg='#f0f8ff', bd=3, relief='groove')
        self.leaderboard_frame.place(relx=0.5, rely=0.5, anchor='center', width=800, height=400)
        
        # Menu button
        menu_btn = tk.Button(
            self, 
            text='üè† Main Menu', 
            font=('Comic Sans MS', 14),
            bg='#5a9', 
            fg='white',
            padx=15,
            pady=8,
            command=lambda: self.controller.show_frame('StartPage')
        )
        menu_btn.place(relx=0.5, rely=0.9, anchor='center')
        
        # Load scores
        self.refresh()

    def refresh(self):
        """Refresh leaderboard display"""
        # Clear existing content
        for widget in self.leaderboard_frame.winfo_children():
            widget.destroy()
        
        # Header
        header = tk.Frame(self.leaderboard_frame, bg='#5a9')
        header.pack(fill='x', pady=(0, 5))
        
        # ÁßªÈô§‰∫ÜÊó∂Èó¥Âàó
        headers = ['Rank', 'Name', 'Score', 'Difficulty']
        widths = [8, 20, 10, 15]  # Ë∞ÉÊï¥ÂàóÂÆΩ
        
        for i, h in enumerate(headers):
            tk.Label(
                header, 
                text=h, 
                font=('Comic Sans MS', 12, 'bold'),
                bg='#5a9', 
                fg='white',
                width=widths[i]
            ).grid(row=0, column=i, padx=2, sticky='ew')
        
        # Get scores
        scores = DataManager().get_scores()
        
        if not scores:
            no_scores = tk.Label(
                self.leaderboard_frame,
                text='No scores yet! Be the first to play!',
                font=('Comic Sans MS', 16),
                bg='#f0f8ff',
                pady=50
            )
            no_scores.pack(fill='both', expand=True)
            return
        
        # Scores container
        scores_container = tk.Canvas(self.leaderboard_frame, bg='#f0f8ff', highlightthickness=0)
        scrollbar = tk.Scrollbar(self.leaderboard_frame, orient='vertical', command=scores_container.yview)
        scrollable_frame = tk.Frame(scores_container, bg='#f0f8ff')
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: scores_container.configure(scrollregion=scores_container.bbox("all"))
        )
        scores_container.create_window((0, 0), window=scrollable_frame, anchor="nw")
        scores_container.configure(yscrollcommand=scrollbar.set)
        
        scores_container.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        
        # Highlight player's score if available
        highlight_index = -1
        if hasattr(self.controller, 'last_score') and self.controller.last_score is not None:
            player_score = self.controller.last_score
            for i, score in enumerate(scores):
                if (score['name'] == player_score['name'] and 
                    score['score'] == player_score['score'] and 
                    score['difficulty'] == player_score['difficulty']):
                    highlight_index = i
                    break
        
        # Scores
        prev_score = None
        rank = 0
        skip = 0
        
        for i, score in enumerate(scores[:10]):  # Top 10 scores
            # Â§ÑÁêÜÂπ∂ÂàóÊéíÂêç
            if prev_score is None or (score['score'] != prev_score['score'] or 
                                     score['difficulty'] != prev_score['difficulty']):
                rank += 1 + skip
                skip = 0
            else:
                skip += 1
            
            # ËÆæÁΩÆËÉåÊôØËâ≤
            if i == highlight_index:
                bg_color = '#FFD700'  # ÈáëËâ≤ËÉåÊôØ - È´ò‰∫ÆÊòæÁ§∫ÂΩìÂâçÁé©ÂÆ∂
            elif i % 2 == 0:
                bg_color = '#e6f7ff'
            else:
                bg_color = '#f0f8ff'
            
            row = tk.Frame(scrollable_frame, bg=bg_color)
            row.pack(fill='x', pady=2)
            
            # Rank
            tk.Label(
                row, 
                text=str(rank), 
                font=('Comic Sans MS', 12),
                bg=bg_color, 
                width=widths[0]
            ).grid(row=0, column=0)
            
            # Name
            tk.Label(
                row, 
                text=score.get('name', 'Unknown'), 
                font=('Comic Sans MS', 12),
                bg=bg_color, 
                width=widths[1]
            ).grid(row=0, column=1)
            
            # Score
            tk.Label(
                row, 
                text=str(score.get('score', 0)), 
                font=('Comic Sans MS', 12),
                bg=bg_color, 
                width=widths[2]
            ).grid(row=0, column=2)
            
            # Difficulty
            tk.Label(
                row, 
                text=score.get('difficulty', 'Easy'), 
                font=('Comic Sans MS', 12),
                bg=bg_color, 
                width=widths[3]
            ).grid(row=0, column=3)
            
            prev_score = score

Utils file
import random
import json
import os
import time
import pygame

class ProblemBank:
    def __init__(self, difficulty='Easy'):
        self.difficulty = difficulty
        self.characters = ['SpongeBob', 'Patrick', 'Squidward', 'Mr. Krabs', 'Sandy']
        self.items = ['Krabby Patty', 'jellyfish', 'bubble', 'net', 'pineapple',
                      'karate glove', 'treasure', 'kite']
        self.quadratic_answers = []  # Store solutions for quadratic problems

    def generate(self):
        """Generate math problem with answer and options"""
        if self.difficulty == 'Easy':
            expr, ans = self._gen_arithmetic()
        elif self.difficulty == 'Medium':
            expr, ans = self._gen_linear()
        else:
            expr, ans = self._gen_quadratic()
        
        # Generate options
        opts = self._generate_options(ans)
        return expr, ans, opts

    def _generate_options(self, ans):
        """Generate 4 answer options"""
        # For quadratic problems, create pair options
        if isinstance(ans, tuple) and self.difficulty == 'Hard':
            # Store the correct pair
            correct_pair = f"{ans[0]},{ans[1]}"
            self.quadratic_answers = [ans[0], ans[1]]
            
            # Create options
            options = [correct_pair]
            while len(options) < 4:
                # Create fake pairs
                fake1 = ans[0] + random.choice([-3,-2,-1,1,2,3])
                fake2 = ans[1] + random.choice([-3,-2,-1,1,2,3])
                fake_pair = f"{fake1},{fake2}"
                if fake_pair not in options:
                    options.append(fake_pair)
        else:
            # Single value answers
            options = [str(ans)]
            while len(options) < 4:
                fake = str(ans + random.choice([-5,-4,-3,-2,-1,1,2,3,4,5]))
                if fake not in options:
                    options.append(fake)
        
        random.shuffle(options)
        return options

    def _gen_arithmetic(self):
        """Generate basic arithmetic problem"""
        op = random.choice(['+', '-', '*', '/'])
        a, b = random.randint(1, 20), random.randint(1, 20)
        
        if op == '/':
            b = random.randint(1, 10)
            a = b * random.randint(1, 10)
        
        result = {'+': a+b, '-': a-b, '*': a*b, '/': a/b}[op]
        return f"{a} {op} {b} = ?", round(result, 2)

    def _gen_linear(self):
        """Generate linear equation problem"""
        a, x, b = random.randint(2, 9), random.randint(1, 10), random.randint(0, 10)
        c = a * x + b
        scene = random.choice([
            f"A toy costs ${a}. You paid ${c} including fee ${b}. How many toys?",
            f"${a} per ticket + ${b} service = ${c}. How many tickets?"
        ])
        return scene, x

    def _gen_quadratic(self):
        """Generate quadratic equation problem with integer solutions"""
        # Ensure integer solutions
        while True:
            a = random.randint(1, 3)
            r1, r2 = random.sample(range(-5, 6), 2)
            if r1 != 0 and r2 != 0 and r1 != r2:  # Avoid zero and duplicate solutions
                break
        
        b = -a * (r1 + r2)
        c = a * r1 * r2
        char = random.choice(self.characters)
        item = random.choice(self.items)
        
        expr = (f"{char} launches {item}s via parabola: "
                f"{a}x¬≤ + {b}x + {c} = 0\nAt what x values does it hit the ground?")
        return expr, (r1, r2)

class DataManager:
    def __init__(self, filepath='highscores.json'):
        self.filepath = filepath
        self._ensure_data_file()
    
    def _ensure_data_file(self):
        """Ensure data file exists"""
        if not os.path.exists(self.filepath):
            with open(self.filepath, 'w') as f:
                json.dump([], f)
    
    def save_score(self, name, score, difficulty):
        """Save score with validation"""
        name = self._sanitize_name(name)
        record = {
            'name': name,
            'score': max(0, score),
            'difficulty': difficulty,
            'date': time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
        try:
            data = self.get_scores()
            data.append(record)
            # Sort by score (desc), then difficulty (hard > medium > easy)
            difficulty_weights = {'Easy': 1, 'Medium': 2, 'Hard': 3}
            data.sort(key=lambda x: (-x['score'], -difficulty_weights.get(x['difficulty'], 0)))
            with open(self.filepath, 'w') as f:
                json.dump(data[:10], f, indent=2)
        except Exception as e:
            print(f"Error saving score: {e}")
    
    def _sanitize_name(self, name):
        """Sanitize player name"""
        if not name or name.isdigit():
            name = f"Player{random.randint(1000,9999)}"
        return name.strip()[:20]
    
    def get_scores(self):
        """Retrieve high scores"""
        try:
            with open(self.filepath, 'r') as f:
                return json.load(f)
        except:
            return []

class SoundManager:
    def __init__(self):
        try:
            pygame.mixer.init(frequency=44100, size=-16, channels=2)
            self.music_on = True
            self._load_sounds()
        except Exception as e:
            print(f"Audio initialization error: {e}")
            self.music_on = False
            self.correct = None
            self.wrong = None
    
    def _load_sounds(self):
        """Initialize audio with error handling"""
        try:
            base = os.path.join('assets', 'Sounds')
            pygame.mixer.music.load(os.path.join(base, 'bgm.wav'))
            pygame.mixer.music.play(-1)
            pygame.mixer.music.set_volume(0.5)
            self.correct = pygame.mixer.Sound(os.path.join(base, 'correct.wav'))
            self.wrong = pygame.mixer.Sound(os.path.join(base, 'wrong.wav'))
        except Exception as e:
            print(f"Audio loading error: {e}")
            self.music_on = False
            self.correct = None
            self.wrong = None
    
    def toggle_music(self):
        """Toggle background music"""
        if not hasattr(self, 'music_on'):
            return False
            
        try:
            if self.music_on:
                pygame.mixer.music.pause()
            else:
                pygame.mixer.music.unpause()
            self.music_on = not self.music_on
            return self.music_on
        except:
            return False
    
    def play_correct(self):
        """Play correct answer sound"""
        try:
            if self.correct:
                self.correct.play()
        except:
            pass
    
    def play_wrong(self):
        """Play wrong answer sound"""
        try:
            if self.wrong:
                self.wrong.play()
        except:
            pass
    
    def stop_bg_music(self):
        """Stop background music"""
        try:
            pygame.mixer.music.stop()
        except:
            pass
    
    def cleanup(self):
        """Clean up audio resources"""
        try:
            pygame.mixer.quit()
        except:
            pass
